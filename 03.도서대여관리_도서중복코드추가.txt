-- <<대여관리>>
-- #제일 처음 창이 뜰 때  
-- 1. 대여가능 목록에 출력할 정보 [도서코드],[도서중복코드], [도서명],[저자],[출판사],[가격],[총대여횟수]
SELECT b.b_code, b.b_sub_code, b_name, author, p.publisher, price, l.b_lend_count FROM bookInfo b 
inner join publisherInfo p on b.p_code = p.p_code 
inner join bookLend bl on b.b_code = bl.b_code and b.b_sub_code = bl.b_sub_code
where l.is_lending = false;

-- # 대여버튼 누르기
-- 1. 대여가능목록에서 도서 선택시 입력창에 정보 뿌리기
-- 1-1. 왼쪽 도서정보 뿌림 [도서코드],[도서중복코드],[도서명],[저자],[출판사],[가격],[총대여횟수]
SELECT b.b_code, b.b_sub_code b_name, author, p.publisher, price, bl.b_lend_count FROM bookInfo b 
inner join publisherInfo p on b.p_code = p.p_code 
inner join bookLend bl on b.b_code = bl.b_code and b.b_sub_code = bl.b_sub_code
where b.b_code= ? and b.b_sub_code = ?;

-- 2. 오른쪽에서 회원 검색 
-- 2-0. 해당 회원이 존재하는가?
select count(*) from memberlend where m_code = ?; -- 있으면 1: 없으면 :0
-- 2-1. 대여 가능한 회원인가? -- 대여불가시 창을 띄워서 정보 띄우지 않음
select is_posbl from memberLend where m_code = ?; -- 1/0 반환

-- 2-1-1. 대여불가 회원이라면 블랙리스트 해당인지 검색
select if(black_date is null, " ", black_date) from memberlend where m_code = ?; -- 블랙 아닐시 " " 블랙일시 date 형식 반환
--        --블랙이라면 ( 해당시 대여 금지마지막일 출력)(~~까지 대여불가)메세지 jLabel로 출력해줄 것;
-- 2-1-2. 대여가능회원이라면  [회원코드], [성명],[전화번호] 출력;
select m_code, m_name, m_tel from memberInfo where m_code = ?;

-- 3. 대여버튼 // 프로시저 사용
delimiter $$
create procedure proc_paymentIO_insert(
	in _b_code char(4),
	in _b_sub_code int(2),
	in _m_code char(4)
)
begin 
	declare _m_now_count int;
	declare err int default 0;
	declare continue handler for sqlexception set err = -1;
	
	
	start transaction;
	-- <<회원대여정보>>테이블에서 [총대여권수] +1, [현재대여권수] +1,  <<도서대여정보>>테이블에서 [총대여횟수] +1, [대여여부] false
	UPDATE bookLend SET  b_lend_count=(b_lend_count+1), is_lending=true WHERE b_code=_b_code and b_sub_code = _b_sub_code;
	UPDATE memberLend SET  m_lend_count=(m_lend_count+1), m_now_count=(m_now_count+1) WHERE m_code=_m_code;
	-- <<출납>>테이블 [회원코드],[도서코드],[대여일자(컴퓨터 현재일자): CURRENT_DATE()],[반납일자(초기화 : null)]
	INSERT INTO paymentIO (b_code, b_sub_code, m_code, lend_date, return_date) VALUES(_b_code, _b_sub_code, _m_code, current_date, null);
	select m_now_count into _m_now_count from memberlend where m_code = _m_code;
	
	-- [대여권수] 5권되면 [대여가능여부] false로 설정
	if _m_now_count > 4 then
		update memberlend set is_posbl = false where m_code = _m_code;
	end if;
	
	
	if err < 0 then
		rollback;
	else
		commit;
	end if;
	
end $$
delimiter ;



-- 3-4. [도서 대여 가능 목록]에 자료 출력 : 1번 다시 실행
SELECT b.b_code, b.b_sub_code, b_name, author, p.publisher, price, l.b_lend_count FROM bookInfo b 
inner join publisherInfo p on b.p_code = p.p_code 
inner join bookLend l on b.b_code = l.b_code and b.b_sub_code = l.b_sub_code
where l.is_lending = false;
