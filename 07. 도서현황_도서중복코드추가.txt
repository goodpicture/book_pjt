-- <<도서현황>>
-- 1. 도서현황 
-- 1-1. 총 보유 권수 
select count(*) from bookInfo;
-- 1-2. 총 연체 권수 : 반납된 예전 기록 말고 **현재시점**에서 반납되지 않고 연체중인 권수
select count(*) from bookInfo b
inner join paymentIO p on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
where return_date is null and (DATEDIFF(CURRENT_DATE,lend_date) >= 3);
-- 1-3. 총 대여횟수 : 예전 기록 말고 **현재시점**에서 대여상태인 권수
select count(*) from bookInfo b
inner join paymentIO p on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
where return_date is null;

-- 2. 분야별 보유 권수 : [분류],[권수] 출력
select c_name, count(*) from bookinfo group by c_name; 
-- 2-1. 보유 총 권수 -- 20
select count(*) from bookinfo; 원형그래프

-- 3. 순위 뽑기

-- 1. 전체 스테디 1~3위
-- **** 그룹으로 묶었을때 insert_Date는 무슨 기준으로 나타나는가??? *****
select count(*) cnt, c_name, p.b_code, b_name, b.author, min(insert_Date) in_date from paymentio p
inner join bookinfo b on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
group by p.b_code order by cnt desc, in_date desc
limit 0, 3; 

-- 2. 월별 베스트 1~3위
select count(*) cnt, c_name, p.b_code, b_name, b.author, min(insert_Date) in_date from paymentio p
inner join bookinfo b on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
where lend_date >= '2017-01-01' and lend_date < '2017-02-01' 
group by p.b_code order by cnt desc, in_date desc 
limit 0, 3; 

-- 3. 분야별 스테디 1~3위
select count(*) cnt, c_name, p.b_code, b_name, b.author, min(insert_Date) in_date from paymentio p
inner join bookinfo b on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
where c_name = ?
group by p.b_code order by cnt desc, in_date desc
limit 0, 3; 

-- 4. 월별 분야별 베스트 1~3위
select count(*) cnt, c_name, p.b_code, b_name, b.author, min(insert_Date) in_date from paymentio p
inner join bookinfo b on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
where c_name = ? 
and lend_date >= '2017-01-01' and lend_date < '2017-02-01' 
group by p.b_code order by cnt desc, in_date desc
limit 0, 3; 
