-- <<회원 검색>>
-- 1. [[성명]]으로 <<회원>>테이블 검색 
-- 1-1. 이름으로 검색한 데이터가 중복인지 확인
select count(*) from book_project.memberInfo where m_name like '%보영%'; -- 1이 아니면 중복이 데이터가 존재하는 것
-- 1-2.[[성명]]으로 <<회원>>테이블 검색  : [성명], [회원코드], [전화번호], [우편번호], [주소], <<회원대여정보>>에서 [블랙리스트종료 날짜] 가져오기
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberlend ml on m.m_code = ml.m_code where m.m_name like '%보영%';
-- 1-3. 중복 발생시 해당 데이터 띄우고 선택하면 해당 [[회원코드]] 로 재검색
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberlend ml on m.m_code = ml.m_code where m.m_code = ?;

-- 2. [[전화번호]]로 검색
-- 2-1.  [[전화번호]]로 검색한 데이터가 중복인지 확인 : 뒷자리검색 / 번호전체 검색 가능
select count(*) from book_project.memberInfo where m_tel like '%1234'; -- 1이 아니면 중복이 데이터가 존재하는 것
-- 2-2.  [[전화번호]]로 검색 : [성명], [회원코드], [전화번호], [우편번호], [주소], <<회원대여정보>>에서 [블랙리스트종료 날짜] 가져오기
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberLend ml on m.m_code = ml.m_code where m.m_tel like '%1234';
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberLend ml on m.m_code = ml.m_code where m.m_tel like '%?';
-- 2-3. 중복 발생시 해당 데이터 띄우고 선택하면 해당 [[회원코드]] 로 재 검색
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberLend ml on m.m_code = ml.m_code where m.m_code = ?;

-- 3. [[회원코드]] 로 검색
select m.m_name, m.m_code, m_tel, m_zip_code, m_address, if(black_date is null," ",black_date) from book_project.memberInfo m
inner join book_project.memberLend ml on m.m_code = ml.m_code where m.m_code = ?;


-- 4. 하단에 띄울 ((대여정보)) [도서코드],[도서명],[대여일자],[반납일자],[연체여부(대여후 3일이후 부터: 10일 대여시 12일이 마감. 13일이 연체시작)]
-- 4-1. 미반납도서 (현재 날짜를 기준으로 계산) : 19개
-- select b.b_code, b_name, lend_date, return_date, if(DATEDIFF(CURRENT_DATE,lend_date)>2,'Y','N') is_delay from book_project.paymentIO p inner join book_project.bookInfo b on b.b_code = p.b_code where p.return_date is null;
-- 4-2. 반납도서 (return_date)를 기준으로 : 20개
-- select b.b_code, b_name, lend_date, return_date, if(DATEDIFF(return_date,lend_date) > 2,'Y','N') is_delay from book_project.paymentIO p inner join book_project.bookInfo b on b.b_code = p.b_code where p.return_date is not null;
-- 4-3. 위 두개 합쳐본 것 : 39개
select b.b_code, b.b_sub_code, b_name, lend_date, return_date, 
if(return_date is null, if(DATEDIFF(CURRENT_DATE,lend_date)>2,'Y','N') , 
if(DATEDIFF(return_date,lend_date) > 2,'Y','N')) is_delay 
from book_project.paymentIO p
inner join book_project.bookInfo b on b.b_code = p.b_code and b.b_sub_code = p.b_sub_code 
inner join book_project.memberinfo m on m.m_code = p.m_code 
where p.m_code = ?;

-- 5. 최하단 총계 출력
-- 5-1. 반납된 도서 수
select count(*) from book_project.paymentIO 
where return_date is not null and m_code = ?; -- 4
-- 5-1-1. 반납된 도서 중 연체된 도서 수
select count(*) from book_project.paymentIO 
where return_date is not null and (DATEDIFF(return_date,lend_date) >2 ) and  m_code = ?; -- 2

-- 5-2. 대출중인 도서
select count(*) from book_project.paymentIO 
where return_date is null and m_code = ?; -- 2
-- 5-2-1. 대출 중인 도서 중 연체도서
select count(*) from book_project.paymentIO 
where return_date is null and (DATEDIFF(CURRENT_DATE,lend_date) >2 ) and  m_code = ?; -- 1
-- 5-3. 총 이용한 도서
select count(*) from book_project.paymentIO where m_code = ?; -- 6
-- 5-3-1. 총 이용도서 중 연체중인 도서 
select count(*) from book_project.paymentIO 
where if(return_date is null, (DATEDIFF(CURRENT_DATE,lend_date) >2), (DATEDIFF(return_date,lend_date) >2)) 
and m_code = ?; -- 3
