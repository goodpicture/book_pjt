-- 1. 반납필요 도서목록 (고정)
select b.b_code,b_name,m.m_code,m_name,lend_date, if(datediff(current_date,lend_date)>2,'Y','N') is_delay
from paymentIO i join memberInfo m on m.m_code = i.m_code
join bookInfo b on b.b_code = i.b_code where return_date is null;
 

-- 2.반납필요 도서목록에서 누르면 그에 해당하는 데이터 정보 쫘아~~~~~
select b.b_code,b_name,author,p.p_code,bl.b_lend_count,m.m_code,m.m_name,m.m_tel,lend_date,return_date
from paymentIO i join bookInfo b on i.b_code=b.b_code join publisherInfo p on b.p_code=p.p_code
join bookLend bl on b.b_code=bl.b_code join memberInfo m on i.m_code=m.m_code
where i.b_code='H003' and m.m_code='M009';

xml 커리
select b.b_code,b_name,author,p.p_code,bl.b_lend_count,m.m_code,m.m_name,m.m_tel,lend_date,return_date
from paymentIO i join bookInfo b on i.b_code=b.b_code join publisherInfo p on b.p_code=p.p_code
join bookLend bl on b.b_code=bl.b_code join memberInfo m on i.m_code=m.m_code
where i.b_code=? and m.m_code=?;

트랜잭션----


CREATE DEFINER=`user_book`@`%` PROCEDURE `book_project`.`proc_paymentIO_update`(
   in _b_code char(4),
   in _b_sub_code char(4),
   in _m_code char(4),
   in _return_date date
)
begin   
   declare _delay_count int ;
   declare _m_now_count int ;
   declare _lend_date date;

   declare _black date;
   declare err int default 0;
   declare continue handler for sqlexception set err = -1;
   
   start transaction;
  select lend_date into _lend_date from paymentio where b_code = _b_code  and b_sub_code = _b_sub_code and m_code= _m_code and return_date is null;

   UPDATE paymentIO SET return_date = _return_date 
   where b_code = _b_code and b_sub_code = _b_sub_code and m_code= _m_code and return_date is null;
      
   UPDATE booklend SET is_lending = false WHERE b_code= _b_code and b_sub_code = _b_sub_code;
   update memberLend set m_now_count=(m_now_count-1) where m_code = _m_code;
   
   
   if datediff(_return_date, _lend_date)>2 then 
      update memberlend set delay_count = (delay_count+1) where m_code=_m_code;
   end if;

   
   select delay_count into _delay_count from memberlend where m_code=_m_code;   
   select m_now_count into _m_now_count from memberlend where m_code=_m_code;   
   if _delay_count > 2 then
      
      if _m_now_count = 0 then -- [연체횟수 ] 3권이상, 현재 대여 권수가 0      
      select max(return_date) into _black from paymentio where m_code = _m_code;
      update memberlend set black_date = date_add(_black , INTERVAL 30 DAY) where m_code=_m_code;
   end if; 
   end if;
   
   if err < 0 then
      rollback;
   else
      commit;
   end if;
   
end

혹시 몰라서 올림 (반납필요 도서목록에서 해당도서 내용 표시 x)
select b.b_code,b_name,m.m_code,m_name,lend_date, if(datediff(current_date,lend_date)>2,'Y','N') is_delay
from paymentIO i join memberInfo m on m.m_code = i.m_code
join bookInfo b on b.b_code = i.b_code where return_date is null;